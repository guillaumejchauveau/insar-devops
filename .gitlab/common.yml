.image_vars_script: &image_vars_script
  # Define image tags.
  - |
    if [[ -z "$CI_COMMIT_TAG" ]]; then
      export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}
      export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_SHA}
    else
      export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE}
      export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_TAG}
    fi
    export image_previous="$CI_APPLICATION_REPOSITORY/$IMAGE_SUFFIX:$CI_COMMIT_BEFORE_SHA"
    export image_tagged="$CI_APPLICATION_REPOSITORY/$IMAGE_SUFFIX:$CI_APPLICATION_TAG"
    export image_latest="$CI_APPLICATION_REPOSITORY/$IMAGE_SUFFIX:latest"

.build_job:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.1-debug
    entrypoint: [""]
  script:
    - *image_vars_script
    # Log into the GitLab Registry and Dependency Proxy.   
    - >
      echo "{
        \"auths\":{
          \"$CI_REGISTRY\":{
            \"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"
          },
          \"$CI_DEPENDENCY_PROXY_SERVER\":{
            \"auth\":\"$(printf "%s:%s" "${CI_DEPENDENCY_PROXY_USER}" "${CI_DEPENDENCY_PROXY_PASSWORD}" | base64 | tr -d '\n')\"
          }
        }
      }" > /kaniko/.docker/config.json
    # Build and push the image.
    - |
      /kaniko/executor \
      --context "$PWD" \
      --destination "$image_tagged" \
      --destination "$image_latest" \
      --cache=true \
      --cache-repo="$CI_REGISTRY_IMAGE/buildcache"

.container_scanning_job:
  stage: test
  variables:
    GIT_STRATEGY: none
  image: registry.gitlab.com/gitlab-org/security-products/analyzers/container-scanning:5
  script:
    - *image_vars_script
    - gtcs scan $image_tagged
  artifacts:
    when: always
    reports:
      container_scanning: gl-container-scanning-report.json
      dependency_scanning: gl-dependency-scanning-report.json
    paths:
      - gl-container-scanning-report.json
      - gl-dependency-scanning-report.json
