apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: monitoring
  labels:
    app.kubernetes.io/name: grafana-config
    app.kubernetes.io/part-of: monitoring.ops
    app.kubernetes.io/component: configuration
data:
  grafana.ini: |
    [feature_toggles]
    enable = tempoSearch tempoBackendSearch tempoApmTable
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring
  labels:
    app.kubernetes.io/name: grafana-datasources
    app.kubernetes.io/part-of: monitoring.ops
    app.kubernetes.io/component: configuration
data:
  datasources.yml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        uid: prometheus
        url: http://prometheus:9090/
        access: proxy
        jsonData:
          exemplarTraceIdDestinations:
          - name: traceID
            datasourceUid: tempo
      - name: Loki
        type: loki
        uid: loki
        url: http://loki:3100
        orgId: 1
        apiVersion: 1
        access: proxy
        jsonData:
          derivedFields:
            - name: TraceID
              datasourceUid: tempo
              matcherRegex: (?:traceID|trace_id)=(\w+)
              url: $${__value.raw}
      - name: Tempo
        type: tempo
        uid: tempo
        url: http://tempo:3100
        access: proxy
        jsonData:
          httpMethod: GET
          serviceMap:
            datasourceUid: prometheus
          tracesToLogs:
            datasourceUid: loki
            tags: ['pod', 'namespace']
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: monitoring.ops
    app.kubernetes.io/component: visualisation
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/part-of: monitoring.ops
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/part-of: monitoring.ops
      annotations:
        ops/logs.scrape: 'true'
        ops/metrics.scrape: 'true'
    spec:
      securityContext:
        fsGroup: 472
        supplementalGroups:
          - 0
      containers:
        - name: grafana
          image: grafana/grafana:9.2.6
          ports:
            - containerPort: 3000
              name: http
              protocol: TCP
          volumeMounts:
            - name: config
              mountPath: /etc/grafana/
            - name: datasources
              mountPath: /etc/grafana/provisioning/datasources/
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /robots.txt
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 2
      volumes:
        - name: config
          configMap:
            name: grafana-config
        - name: datasources
          configMap:
            name: grafana-datasources
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: monitoring.ops
    app.kubernetes.io/component: visualisation
spec:
  ports:
    - name: http
      port: 3000
      targetPort: http
      nodePort: 30300
  type: NodePort
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: monitoring.ops
  sessionAffinity: None
